{"ast":null,"code":"var _jsxFileName = \"D:\\\\Libraries\\\\Documents\\\\React Projects\\\\pokemon-expectation-vs-reality\\\\client\\\\src\\\\App.js\";\nimport React from 'react';\nimport { isMobile } from 'react-device-detect';\nimport PokemonAdapter from './PokemonAdapter';\nimport StatLine from './StatLine';\nimport pLimit from 'p-limit';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default class App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      useDBForImages: true,\n      totalLoadingSteps: 1,\n      currentLoadingSteps: 0,\n      pokemonList: [],\n      currentPokemon1: null,\n      currentPokemon2: null\n    };\n    this.selectNewPokemon = this.selectNewPokemon.bind(this);\n  }\n  componentDidMount() {\n    (async () => {\n      let response = await fetch(\"/get\");\n      this.setState({\n        pokemonList: response\n      });\n      this.selectNewPokemon();\n    })();\n\n    /* (async () => {\n    \t//fetch urls to pokemon objects from apis\n    \tconst json = await this.fetchJson('https://pokeapi.co/api/v2/pokemon?limit=2000', false);\n    \tthis.setState({\n    \t\ttotalLoadingSteps: json.count\n    \t});\n    \tconst pokemonUrls = await json.results;\n    \t\t//limit to 400 simultaneous API requests\n    \tconst limit = pLimit(400);\n    \t\tconst pokemonList = await Promise.all(\n    \t\tpokemonUrls.map(async (pokemon) => {\n    \t\t\treturn await limit(() => this.fetchJson(pokemon.url, true));\n    \t\t})\n    \t);\n    \tthis.setState({\n    \t\tpokemonList: pokemonList,\n    \t});\n    \t\tlet useDB = this.state.useDBForImages;\n    \tlet filteredPokemon = PokemonAdapter.performAllActions(pokemonList, useDB)\n    \tthis.setState({\n    \t\tpokemonList: filteredPokemon,\n    \t});\n    \t\t//this.state.pokemonList doesn't populate unless you wait some amount of time for reason\n    \tsetTimeout(this.selectNewPokemon, 1);\n    })(); */\n  }\n  fetchJson(url, loadingStep) {\n    let response = fetch(url).then(result => {\n      if (loadingStep) {\n        this.setState(prevState => {\n          return {\n            currentLoadingSteps: prevState.currentLoadingSteps + 1\n          };\n        });\n      }\n      const json = result.json();\n      return json;\n    });\n    return response;\n  }\n  async selectNewPokemon() {\n    let random1 = Math.floor(Math.random() * this.state.pokemonList.length);\n    let random2 = Math.floor(Math.random() * this.state.pokemonList.length);\n    await this.setState(prevState => {\n      return {\n        currentPokemon1: prevState.pokemonList[random1],\n        currentPokemon2: prevState.pokemonList[random2]\n      };\n    });\n  }\n  getImageUrl(pokemon) {\n    let imageUrl;\n    if (this.state.useDBForImages) {\n      imageUrl = 'https://img.pokemondb.net/artwork/' + pokemon.name + '.jpg';\n    } else {\n      let imageBase = pokemon.sprites.other;\n      imageUrl = imageBase['official-artwork']['front_default'];\n    }\n    return imageUrl;\n  }\n  render() {\n    /* //let loaded = this.state.currentPokemon1 && this.state.currentPokemon2;\n    let content;\n    \t//if (loaded) {\n    \tlet imageUrl1 = this.getImageUrl(this.state.currentPokemon1);\n    \tlet imageUrl2 = this.getImageUrl(this.state.currentPokemon2);\n    \tlet imageClassName = isMobile ? 'pokemon-img-mobile' : 'pokemon-img';\n    \tlet stats = ['HP', 'Attack', 'Defense', 'Special Attack', 'Special Defense', 'Speed'];\n    \t \tcontent = (\n    \t\t<div>\n    \t\t\t<table>\n    \t\t\t\t<thead>\n    \t\t\t\t\t<tr>\n    \t\t\t\t\t\t<th>\n    \t\t\t\t\t\t\t<img\n    \t\t\t\t\t\t\t\tclassName={imageClassName}\n    \t\t\t\t\t\t\t\tsrc={imageUrl1}\n    \t\t\t\t\t\t\t\talt={this.state.currentPokemon1.name}\n    \t\t\t\t\t\t\t/>\n    \t\t\t\t\t\t</th>\n    \t\t\t\t\t\t<th></th>\n    \t\t\t\t\t\t<th>\n    \t\t\t\t\t\t\t<img\n    \t\t\t\t\t\t\t\tclassName={imageClassName}\n    \t\t\t\t\t\t\t\tsrc={imageUrl2}\n    \t\t\t\t\t\t\t\talt={this.state.currentPokemon2.name}\n    \t\t\t\t\t\t\t/>\n    \t\t\t\t\t\t</th>\n    \t\t\t\t\t</tr>\n    \t\t\t\t\t<tr className='full-width'>\n    \t\t\t\t\t\t<th className='line-break' colSpan='3'>\n    \t\t\t\t\t\t\tWhich of these Pokémon looks like it should have higher...\n    \t\t\t\t\t\t</th>\n    \t\t\t\t\t</tr>\n    \t\t\t\t</thead>\n    \t\t\t\t<tbody>\n    \t\t\t\t\t{stats.map((stat, i) => <StatLine\n    \t\t\t\t\t\tkey={stat}\n    \t\t\t\t\t\tindex={i}\n    \t\t\t\t\t\tname={stat}\n    \t\t\t\t\t\tpokemon1={this.state.currentPokemon1}\n    \t\t\t\t\t\tpokemon2={this.state.currentPokemon2}\n    \t\t\t\t\t/>)}\n    \t\t\t\t</tbody>\n    \t\t\t</table>\n    \t\t\t<div id='end-buttons'>\n    \t\t\t\t<button>Community Rankings</button>\n    \t\t\t\t<button onClick={this.selectNewPokemon}>\n    \t\t\t\t\tCompare more Pokémon\n    \t\t\t\t</button>\n    \t\t\t</div>\n    \t\t\t<button onClick={() => {\n    \t\t\t\tlet response = fetch(\"/get\");\n    \t\t\t\tconsole.log(response);\n    \t\t\t}}>\n    \t\t\t\tFetch\n    \t\t\t</button>\n    \t\t</div>\n    \t\t\n    \t);\n    /* } else {\n    \tlet percentage = Math.floor((this.state.currentLoadingSteps / this.state.totalLoadingSteps) * 100);\n    \tcontent = (\n    \t\t<h1>Loading ({percentage}%)...</h1>\n    \t);\n    } */\n\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      children: this.state.currentPokemon1\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 177,\n      columnNumber: 4\n    }, this);\n  }\n}","map":{"version":3,"names":["React","isMobile","PokemonAdapter","StatLine","pLimit","jsxDEV","_jsxDEV","App","Component","constructor","props","state","useDBForImages","totalLoadingSteps","currentLoadingSteps","pokemonList","currentPokemon1","currentPokemon2","selectNewPokemon","bind","componentDidMount","response","fetch","setState","fetchJson","url","loadingStep","then","result","prevState","json","random1","Math","floor","random","length","random2","getImageUrl","pokemon","imageUrl","name","imageBase","sprites","other","render","children","fileName","_jsxFileName","lineNumber","columnNumber"],"sources":["D:/Libraries/Documents/React Projects/pokemon-expectation-vs-reality/client/src/App.js"],"sourcesContent":["import React from 'react';\nimport { isMobile } from 'react-device-detect';\nimport PokemonAdapter from './PokemonAdapter';\nimport StatLine from './StatLine';\nimport pLimit from 'p-limit';\n\nexport default class App extends React.Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\n\t\tthis.state = {\n\t\t\tuseDBForImages: true,\n\t\t\ttotalLoadingSteps: 1,\n\t\t\tcurrentLoadingSteps: 0,\n\t\t\tpokemonList: [],\n\t\t\tcurrentPokemon1: null,\n\t\t\tcurrentPokemon2: null\n\t\t}\n\n\t\tthis.selectNewPokemon = this.selectNewPokemon.bind(this);\n\t}\n\n\tcomponentDidMount() {\n\t\t(async () => {\n\t\t\tlet response = await fetch(\"/get\");\n\t\t\tthis.setState({\n\t\t\t\tpokemonList: response\n\t\t\t});\n\n\t\t\tthis.selectNewPokemon();\n\t\t})();\n\t\t\n\n\t\t/* (async () => {\n\t\t\t//fetch urls to pokemon objects from apis\n\t\t\tconst json = await this.fetchJson('https://pokeapi.co/api/v2/pokemon?limit=2000', false);\n\t\t\tthis.setState({\n\t\t\t\ttotalLoadingSteps: json.count\n\t\t\t});\n\t\t\tconst pokemonUrls = await json.results;\n\n\t\t\t//limit to 400 simultaneous API requests\n\t\t\tconst limit = pLimit(400);\n\n\t\t\tconst pokemonList = await Promise.all(\n\t\t\t\tpokemonUrls.map(async (pokemon) => {\n\t\t\t\t\treturn await limit(() => this.fetchJson(pokemon.url, true));\n\t\t\t\t})\n\t\t\t);\n\t\t\tthis.setState({\n\t\t\t\tpokemonList: pokemonList,\n\t\t\t});\n\n\t\t\tlet useDB = this.state.useDBForImages;\n\t\t\tlet filteredPokemon = PokemonAdapter.performAllActions(pokemonList, useDB)\n\t\t\tthis.setState({\n\t\t\t\tpokemonList: filteredPokemon,\n\t\t\t});\n\n\t\t\t//this.state.pokemonList doesn't populate unless you wait some amount of time for reason\n\t\t\tsetTimeout(this.selectNewPokemon, 1);\n\t\t})(); */\n\t}\n\n\tfetchJson(url, loadingStep) {\n\t\tlet response = fetch(url)\n\t\t.then(\n\t\t\t(result) => {\n\t\t\t\tif (loadingStep) {\n\t\t\t\t\tthis.setState(prevState => {\n\t\t\t\t\t\treturn {currentLoadingSteps: prevState.currentLoadingSteps + 1};\n\t\t\t\t\t});\n\t\t\t\t}\n\n\t\t\t\tconst json = result.json();\n\t\t\t\treturn json;\n\t\t\t}\n\t\t);\n\n\t\treturn response;\n\t}\n\n\tasync selectNewPokemon() {\n\t\tlet random1 = Math.floor(Math.random() * this.state.pokemonList.length);\n\t\tlet random2 = Math.floor(Math.random() * this.state.pokemonList.length);\n\n\t\tawait this.setState(prevState => {\n\t\t\treturn {\n\t\t\t\tcurrentPokemon1: prevState.pokemonList[random1],\n\t\t\t\tcurrentPokemon2: prevState.pokemonList[random2]\n\t\t\t}\n\t\t});\n\t}\n\n\tgetImageUrl(pokemon) {\n\t\tlet imageUrl;\n\t\tif (this.state.useDBForImages) {\n\t\t\timageUrl = 'https://img.pokemondb.net/artwork/' + pokemon.name + '.jpg'\n\t\t} else {\n\t\t\tlet imageBase = pokemon.sprites.other\n\t\t\timageUrl = imageBase['official-artwork']['front_default'];\n\t\t}\n\n\t\treturn imageUrl;\n\t}\n\n\trender() {\n\t\t/* //let loaded = this.state.currentPokemon1 && this.state.currentPokemon2;\n\t\tlet content;\n\n\t\t//if (loaded) {\n\t\t\tlet imageUrl1 = this.getImageUrl(this.state.currentPokemon1);\n\t\t\tlet imageUrl2 = this.getImageUrl(this.state.currentPokemon2);\n\t\t\tlet imageClassName = isMobile ? 'pokemon-img-mobile' : 'pokemon-img';\n\t\t\tlet stats = ['HP', 'Attack', 'Defense', 'Special Attack', 'Special Defense', 'Speed'];\n\n\t\t \tcontent = (\n\t\t\t\t<div>\n\t\t\t\t\t<table>\n\t\t\t\t\t\t<thead>\n\t\t\t\t\t\t\t<tr>\n\t\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName={imageClassName}\n\t\t\t\t\t\t\t\t\t\tsrc={imageUrl1}\n\t\t\t\t\t\t\t\t\t\talt={this.state.currentPokemon1.name}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t\t<th></th>\n\t\t\t\t\t\t\t\t<th>\n\t\t\t\t\t\t\t\t\t<img\n\t\t\t\t\t\t\t\t\t\tclassName={imageClassName}\n\t\t\t\t\t\t\t\t\t\tsrc={imageUrl2}\n\t\t\t\t\t\t\t\t\t\talt={this.state.currentPokemon2.name}\n\t\t\t\t\t\t\t\t\t/>\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t\t<tr className='full-width'>\n\t\t\t\t\t\t\t\t<th className='line-break' colSpan='3'>\n\t\t\t\t\t\t\t\t\tWhich of these Pokémon looks like it should have higher...\n\t\t\t\t\t\t\t\t</th>\n\t\t\t\t\t\t\t</tr>\n\t\t\t\t\t\t</thead>\n\t\t\t\t\t\t<tbody>\n\t\t\t\t\t\t\t{stats.map((stat, i) => <StatLine\n\t\t\t\t\t\t\t\tkey={stat}\n\t\t\t\t\t\t\t\tindex={i}\n\t\t\t\t\t\t\t\tname={stat}\n\t\t\t\t\t\t\t\tpokemon1={this.state.currentPokemon1}\n\t\t\t\t\t\t\t\tpokemon2={this.state.currentPokemon2}\n\t\t\t\t\t\t\t/>)}\n\t\t\t\t\t\t</tbody>\n\t\t\t\t\t</table>\n\t\t\t\t\t<div id='end-buttons'>\n\t\t\t\t\t\t<button>Community Rankings</button>\n\t\t\t\t\t\t<button onClick={this.selectNewPokemon}>\n\t\t\t\t\t\t\tCompare more Pokémon\n\t\t\t\t\t\t</button>\n\t\t\t\t\t</div>\n\t\t\t\t\t<button onClick={() => {\n\t\t\t\t\t\tlet response = fetch(\"/get\");\n\t\t\t\t\t\tconsole.log(response);\n\t\t\t\t\t}}>\n\t\t\t\t\t\tFetch\n\t\t\t\t\t</button>\n\t\t\t\t</div>\n\t\t\t\t\n\t\t\t);\n\t\t/* } else {\n\t\t\tlet percentage = Math.floor((this.state.currentLoadingSteps / this.state.totalLoadingSteps) * 100);\n\t\t\tcontent = (\n\t\t\t\t<h1>Loading ({percentage}%)...</h1>\n\t\t\t);\n\t\t} */\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t{this.state.currentPokemon1}\n\t\t\t</div>\n\t\t);\n\t}\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}